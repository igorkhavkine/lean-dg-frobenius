import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Geometry.Manifold.IsManifold.Basic
import Mathlib.Geometry.Manifold.VectorBundle.SmoothSection
import Mathlib.Geometry.Manifold.VectorField
import Mathlib


open Nat Real Manifold

abbrev E (dim: ‚Ñï) := (EuclideanSpace ‚Ñù (Fin dim))

class SmoothManifold (M: Type*) (dim: ‚Ñï) extends
  TopologicalSpace M, ChartedSpace (E dim) M, IsManifold (modelWithCornersSelf ‚Ñù (E dim)) ‚ä§ M

abbrev SSmoothMap (X: Type*) {dimX: ‚Ñï} (Y: Type*) {dimY: ‚Ñï} [SmoothManifold X dimX] [SmoothManifold Y dimY]
  := ContMDiffMap (modelWithCornersSelf ‚Ñù (E dimX)) (modelWithCornersSelf ‚Ñù (E dimY)) X Y ‚ä§



abbrev SVectorBundle {B: Type*} (F: Type*) (V: B ‚Üí Type*)
  [(x:B) ‚Üí AddCommMonoid (V x)] [(x:B) ‚Üí Module ‚Ñù (V x)]
  [(x:B) ‚Üí TopologicalSpace (V x)] [NormedAddCommGroup F]
  [NormedSpace ‚Ñù F] [TopologicalSpace B]
  [TopologicalSpace (Bundle.TotalSpace F V)] [FiberBundle F V]
    := VectorBundle ‚Ñù F V

-- For some reason ContMDiffSection induced a different type for its last hidden
-- argument differently than the default type given to fbFV by the typeclass resolver.
-- The default hidden argument to FiberBundle is tot_topF, while
-- ContMDiffSection expected UniformSpace.toTopologicalSpace in its place.
-- Is it a Mathlib bug, or is that intentional behavior?
abbrev SSmoothSection {M: Type*} {dim: ‚Ñï}
  [SmoothManifold M dim] -- base manifold
  (F: Type*) [NormedAddCommGroup F] [NormedSpace ‚Ñù F] -- bundle fiber type
  (V: M ‚Üí Type*) -- total space of the bundle
  [tot_topF : TopologicalSpace F] [tot_topFV : TopologicalSpace (Bundle.TotalSpace F V)]
  [fib_topFV : (x:M) ‚Üí TopologicalSpace (V x)] [fbFV : @FiberBundle _ F _ UniformSpace.toTopologicalSpace V _ _ ] -- This assumption doesn't seem to satisfy the typechecker
    := @ContMDiffSection _ _ _ _ _ _ _ (modelWithCornersSelf ‚Ñù (E dim)) M _ _ F _ _ ‚ä§ V _ _ fbFV


section TangentBundle

open VectorField ContDiff

variable (M: Type*) {dim: ‚Ñï} [SmoothManifold M dim]

abbrev STangentSpace (x: M)
  := TangentSpace (modelWithCornersSelf ‚Ñù (E dim)) x

-- As of 06.03.2025, Mathlib has a definition of the Lie bracket of vector fields,
-- and a formalization of a bunch of its properties.
-- Here's a example: the Lie bracket of two smooth vector fields is a smooth vector field.

-- sections as dependent functions
variable (V W : Œ† (x: M), STangentSpace (dim := dim) M x)
#check mlieBracket (modelWithCornersSelf ‚Ñù (E dim)) V W -- the Lie bracket is defined
-- Smoothness of sections is encoded as follows:
variable (hV : ‚àÄ (x : M), ContMDiffAt
  ùìò(‚Ñù, E dim) --(modelWithCornersSelf ‚Ñù (E dim))
  ùìò(‚Ñù, E dim).tangent
  ‚àû
  (fun y ‚Ü¶ (V y : TangentBundle (modelWithCornersSelf ‚Ñù (E dim)) M)) x)
variable (hW : ‚àÄ (x : M), ContMDiffAt
  (modelWithCornersSelf ‚Ñù (E dim))
  (modelWithCornersSelf ‚Ñù (E dim)).tangent
  ‚àû
  (fun y ‚Ü¶ (W y : TangentBundle (modelWithCornersSelf ‚Ñù (E dim)) M)) x)
-- need to check that the original smoothness of V and W (‚àû) is at least
-- as big as 1 + the requested smoothness of their Lie bracket (‚àû + 1)
theorem minSmoothness_inf_add_1_le_inf : (minSmoothness ‚Ñù (‚àû + 1)) ‚â§ ‚àû := by
  rw [minSmoothness_of_isRCLikeNormedField]
  norm_num
-- the following proves that the Lie bracket [V,W] is smooth wen V and W are smooth
example := fun x ‚Ü¶
  ContMDiffAt.mlieBracket_vectorField (hV x) (hW x) minSmoothness_inf_add_1_le_inf


-- defn of the section of (vec) bundle
--
abbrev STangentBundle
    := TangentBundle (modelWithCornersSelf ‚Ñù (E dim)) M

-- find bundle tot.sp. smooth manif
--
instance: SmoothManifold (@STangentBundle M dim _) (2*dim) :=
  sorry

abbrev SVectorField
  := @SSmoothMap M dim (@STangentBundle M dim _) (2*dim) _ _ -- use section

end TangentBundle

-- find global/inv definition, or *local coords*, or derivations
--
def lieBracket {M: Type*} {dim: ‚Ñï} [SmoothManifold M dim]
  (X: @SVectorField M dim _) (Y: @SVectorField M dim _) : @SVectorField M dim _
  := X‚àòY - Y‚àòX

#min_imports
